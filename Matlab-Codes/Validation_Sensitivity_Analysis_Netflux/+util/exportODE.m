function [commandLine,commandLine2,commandLine3] = exportODE(speciesNames,paramList,ODElist,nfname)
%Exports system of equations to standalone .m files.
% 
%   exportODE.m
%   This function generates the contents of files used for exporting the model 
%   as standalone MATLAB code.
%   Inputs: 
%   paramsList = parameter list
%   speciesNames = list of speciesNames
%   ODElist = list of ODEs 
%   Outputs: 
%   commandLine = cell array containing the ODEs
%   commandLine2 = cell array containing the parameters
%   commandLine3 = cell array containing code for calling ODE solver
%   08/31/2011 by JJS
%   09/28/2017 update by PMT
%   01/15/2018 update by JJS

%% Write file that defines the parameters
[w,n,EC50,tau,ymax,y0] = paramList{:};
commandLine2{1} = sprintf(['function [params,y0] = ',nfname,'_loadParams()']);     
commandLine2{end+1} = sprintf(['%% ',nfname,'_loadParams.m']);
commandLine2{end+1} = sprintf('%% Automatically generated by Netflux on %s\n',date);
commandLine2{end+1} = sprintf('%% species parameters');
commandLine2{end+1} = sprintf(['speciesNames = {',sprintf('\''%s\'',',speciesNames{:}),'};']); 
commandLine2{end+1} = sprintf(['tau = [',sprintf('%d, ',tau),'];']);
commandLine2{end+1} = sprintf(['ymax = [',sprintf('%d, ',ymax),'];\n']);
commandLine2{end+1} = sprintf('%% reaction parameters');
commandLine2{end+1} = sprintf(['w = [',sprintf('%d, ',w),'];']);
commandLine2{end+1} = sprintf(['n = [',sprintf('%d, ',n),'];']);
commandLine2{end+1} = sprintf(['EC50 = [',sprintf('%d, ',EC50),'];']);
commandLine2{end+1} = sprintf('rpar = [w;n;EC50];\n');
commandLine2{end+1} = sprintf('params = {rpar,tau,ymax,speciesNames};\n');
commandLine2{end+1} = sprintf(['y0 = [',sprintf('%d, ',y0),'];']); 

%% Write the run file that calls the params and ODEfile
commandLine3{1} = sprintf(['%% ',nfname,'_run.m\n']);
commandLine3{end+1} = sprintf('%% Automatically generated by Netflux on %s\n\n',date);
commandLine3{end+1} = sprintf('%% Load parameters\n');
commandLine3{end+1} = sprintf(['[params,y0] = ',nfname,'_loadParams();\n\n']);     
commandLine3{end+1} = sprintf('%% Run single simulation\n');
commandLine3{end+1} = sprintf('tspan = [0 10];\n');
commandLine3{end+1} = sprintf('options = [];\n');
commandLine3{end+1} = sprintf(['[t,y] = ode23(@',nfname,',tspan,y0,options,params);\n\n']);
commandLine3{end+1} = sprintf('%% Plot results\n');
commandLine3{end+1} = sprintf('figure;\n');
commandLine3{end+1} = sprintf('plot(t,y);\n');
commandLine3{end+1} = sprintf('xlabel(''Time (sec)'');\n');
commandLine3{end+1} = sprintf('ylabel(''Fractional Species Activation'');\n');
commandLine3{end+1} = sprintf('speciesNames = params{4};\n');
commandLine3{end+1} = sprintf('legend(speciesNames);');

%% Write the ODEfun
commandLine{1} = sprintf(['function dydt=',nfname,'(t,y,params)']);
commandLine{end+1} = sprintf(['%% ',nfname,'.m']);
commandLine{end+1} = sprintf('%% Automatically generated by Netflux on %s\n',date);
commandLine{end+1} = sprintf('%% Assign names for parameters');
commandLine{end+1} = sprintf('[rpar,tau,ymax,speciesNames]=params{:};');
for i = 1:length(ODElist)
    commandLine{end+1} = sprintf(ODElist{i});
end
 
%% write utility functions
commandLine{end+1} = sprintf('\n%% utility functions');
commandLine{end+1} = sprintf('function fact = act(x,rpar)');
commandLine{end+1} = sprintf('%% hill activation function with parameters w (weight), n (Hill coeff), EC50');
commandLine{end+1} = sprintf('    w = rpar(1);');
commandLine{end+1} = sprintf('    n = rpar(2);');
commandLine{end+1} = sprintf('    EC50 = rpar(3);');
commandLine{end+1} = sprintf('    beta = (EC50.^n - 1)./(2*EC50.^n - 1);');
commandLine{end+1} = sprintf('    K = (beta - 1).^(1./n);');
commandLine{end+1} = sprintf('    fact = w.*(beta.*x.^n)./(K.^n + x.^n);');
commandLine{end+1} = sprintf('    if fact>w,                 %% cap fact(x)<= 1');
commandLine{end+1} = sprintf('        fact = w;');
commandLine{end+1} = sprintf('    end\n');

commandLine{end+1} = sprintf('function finhib = inhib(x,rpar)');
commandLine{end+1} = sprintf('%% inverse hill function with parameters w (weight), n (Hill coeff), EC50');
commandLine{end+1} = sprintf('    finhib = rpar(1) - act(x,rpar);\n');

commandLine{end+1} = sprintf('function z = OR(x,y)');
commandLine{end+1} = sprintf('%% OR logic gate');
commandLine{end+1} = sprintf('    z = x + y - x*y;\n');

commandLine{end+1} = sprintf('function z = AND(rpar,varargin)');
commandLine{end+1} = sprintf('%% AND logic gate, multiplying all of the reactants together');
commandLine{end+1} = sprintf('    w = rpar(1);');
commandLine{end+1} = sprintf('    if w == 0,');
commandLine{end+1} = sprintf('        z = 0;'); 
commandLine{end+1} = sprintf('    else');
commandLine{end+1} = sprintf('        v = cell2mat(varargin);'); 
commandLine{end+1} = sprintf('        z = prod(v)/w^(nargin-2); % need to divide by w^(#reactants-1) to eliminate the extra ws'); 
commandLine{end+1} = sprintf('    end');

commandLine = commandLine';
commandLine2 = commandLine2';